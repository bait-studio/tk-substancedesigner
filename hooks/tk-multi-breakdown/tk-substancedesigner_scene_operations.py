# Copyright (c) 2013 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

from tank import Hook
import os


__author__ = "Diego Garcia Huerta"
__contact__ = "https://www.linkedin.com/in/diegogh/"


import sd


# let's put some color to these gray-ish UIs
ITEM_COLORS = {"package": "#e7a81d", "resource": "#a8e71d"}


class BreakdownSceneItem(str):
    """
    Helper Class to store metadata per update item.

    tk-multi-breakdown requires item['node'] to be a str. This is what is displayed in
    the list of recognized items to update. We want to add metadata to each item
    as what we want to display as name is not the actual item to update.
    As a str is required we are forced to inherit from str instead of the more
    python friendly object + __repr__ magic method.
    """

    def __new__(cls, node, node_type):
        in_use = True

        if node_type == "package":
            filename = node.getFilePath()
            _, filename_file = os.path.split(filename)
            filename_file_name, _ = os.path.splitext(filename_file)
            subtitle = filename_file_name

        if node_type == "resource":
            subtitle = node.getIdentifier()

        text = (
            "<span style='color:%s'><b>%s</b></span>"
            "<br/><nobr><b><sub>%s</sub></b></nobr>"
            % (ITEM_COLORS[node_type], subtitle, node_type)
        )

        item = str.__new__(cls, text)
        item.node = node
        item.node_type = node_type

        return item


class BreakdownSceneOperations(Hook):
    """
    Breakdown operations for SubstanceDesigner.

    This implementation handles detection of substancedesigner read and write nodes.
    """

    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene
        reference that is returned should be represented by a dictionary with
        three keys:

        - "attr": The filename attribute of the 'node' that is to be operated
           on. Most DCCs have a concept of a node, attribute, path or some
           other way to address a particular object in the scene.
        - "type": The object type that this is. This is later passed to the
           update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.

        Toolkit will scan the list of items, see if any of the objects matches
        any templates and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of
        date.
        """

        app = self.parent
        engine = app.engine

        # Introspect the substance designer scene for read and write nodes
        # so we can gather the filenames available.
        refs = []

        pck_manager = sd.getContext().getSDApplication().getPackageMgr()
        pcks = pck_manager.getUserPackages()

        for pck in pcks:
            ref_path = pck.getFilePath()
            if ref_path:
                refs.append(
                    {
                        "node": BreakdownSceneItem(pck, "package"),
                        "type": "package",
                        "path": ref_path,
                    }
                )

            resources = pck.getChildrenResources(True)
            for resource in resources:
                ref_path = resource.getFilePath()
                if ref_path:
                    refs.append(
                        {
                            "node": BreakdownSceneItem(resource, "resource"),
                            "type": "resource",
                            "path": ref_path,
                        }
                    )

        return refs

    def update(self, items):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        The items parameter is a list of dictionaries on the same form as was
        generated by the scan_scene hook above. The path key now holds
        the that each attribute should be updated *to* rather than the current
        path.
        """

        engine = self.parent.engine

        for i in items:
            node_type = i["type"]
            new_path = i["path"]

            if node_type == "package":
                pck = i["node"].node

                engine.log_debug("Updating %s to: %s" % (node_type, new_path))
                pck_manager = sd.getContext().getSDApplication().getPackageMgr()

                # open the new one
                new_pck = pck_manager.loadUserPackage(new_path)

                # close the old one
                if new_pck:
                    pck_manager.unloadUserPackage(pck)

            elif node_type == "resource":
                # unfortunately I could not find a way to update the 'file_path'
                # annotation property for resources with this property. While
                # it can be done through the UI, it seems it is locked code wise
                # as an Exception SDApiError.DataIsReadOnly is thrown
                pass
